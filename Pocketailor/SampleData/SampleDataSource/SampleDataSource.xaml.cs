//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.SampleDataSource
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class SampleDataSource { }
#else

	public class SampleDataSource : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public SampleDataSource()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/Pocketailor;component/SampleData/SampleDataSource/SampleDataSource.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private Profiles _Profiles = new Profiles();

		public Profiles Profiles
		{
			get
			{
				return this._Profiles;
			}
		}

		private SelectedProfile _SelectedProfile = new SelectedProfile();

		public SelectedProfile SelectedProfile
		{
			get
			{
				return this._SelectedProfile;
			}

			set
			{
				if (this._SelectedProfile != value)
				{
					this._SelectedProfile = value;
					this.OnPropertyChanged("SelectedProfile");
				}
			}
		}

		private MeasurementTypes _MeasurementTypes = new MeasurementTypes();

		public MeasurementTypes MeasurementTypes
		{
			get
			{
				return this._MeasurementTypes;
			}
		}

		private MeasurementTemplates _MeasurementTemplates = new MeasurementTemplates();

		public MeasurementTemplates MeasurementTemplates
		{
			get
			{
				return this._MeasurementTemplates;
			}
		}

		private SuggestedMeasurementTemplate _SuggestedMeasurementTemplate = new SuggestedMeasurementTemplate();

		public SuggestedMeasurementTemplate SuggestedMeasurementTemplate
		{
			get
			{
				return this._SuggestedMeasurementTemplate;
			}

			set
			{
				if (this._SuggestedMeasurementTemplate != value)
				{
					this._SuggestedMeasurementTemplate = value;
					this.OnPropertyChanged("SuggestedMeasurementTemplate");
				}
			}
		}

		private SelectedMeasurement _SelectedMeasurement = new SelectedMeasurement();

		public SelectedMeasurement SelectedMeasurement
		{
			get
			{
				return this._SelectedMeasurement;
			}

			set
			{
				if (this._SelectedMeasurement != value)
				{
					this._SelectedMeasurement = value;
					this.OnPropertyChanged("SelectedMeasurement");
				}
			}
		}

		private QuickProfiles _QuickProfiles = new QuickProfiles();

		public QuickProfiles QuickProfiles
		{
			get
			{
				return this._QuickProfiles;
			}
		}

		private Regions _Regions = new Regions();

		public Regions Regions
		{
			get
			{
				return this._Regions;
			}
		}

		private ConversionMeasurements _ConversionMeasurements = new ConversionMeasurements();

		public ConversionMeasurements ConversionMeasurements
		{
			get
			{
				return this._ConversionMeasurements;
			}
		}

		private bool _IsLocked = false;

		public bool IsLocked
		{
			get
			{
				return this._IsLocked;
			}

			set
			{
				if (this._IsLocked != value)
				{
					this._IsLocked = value;
					this.OnPropertyChanged("IsLocked");
				}
			}
		}

		private System.Windows.Media.ImageSource _ConversionsByRegionPageBGImage = null;

		public System.Windows.Media.ImageSource ConversionsByRegionPageBGImage
		{
			get
			{
				return this._ConversionsByRegionPageBGImage;
			}

			set
			{
				if (this._ConversionsByRegionPageBGImage != value)
				{
					this._ConversionsByRegionPageBGImage = value;
					this.OnPropertyChanged("ConversionsByRegionPageBGImage");
				}
			}
		}

		private string _ConversionsByRegionPageTitle = string.Empty;

		public string ConversionsByRegionPageTitle
		{
			get
			{
				return this._ConversionsByRegionPageTitle;
			}

			set
			{
				if (this._ConversionsByRegionPageTitle != value)
				{
					this._ConversionsByRegionPageTitle = value;
					this.OnPropertyChanged("ConversionsByRegionPageTitle");
				}
			}
		}

		private string _SelectedConversionType = string.Empty;

		public string SelectedConversionType
		{
			get
			{
				return this._SelectedConversionType;
			}

			set
			{
				if (this._SelectedConversionType != value)
				{
					this._SelectedConversionType = value;
					this.OnPropertyChanged("SelectedConversionType");
				}
			}
		}

		private bool _ShowHiddenConversions = false;

		public bool ShowHiddenConversions
		{
			get
			{
				return this._ShowHiddenConversions;
			}

			set
			{
				if (this._ShowHiddenConversions != value)
				{
					this._ShowHiddenConversions = value;
					this.OnPropertyChanged("ShowHiddenConversions");
				}
			}
		}

		private string _AppVersion = string.Empty;

		public string AppVersion
		{
			get
			{
				return this._AppVersion;
			}

			set
			{
				if (this._AppVersion != value)
				{
					this._AppVersion = value;
					this.OnPropertyChanged("AppVersion");
				}
			}
		}

		private bool _HasTrouserMeasurements = false;

		public bool HasTrouserMeasurements
		{
			get
			{
				return this._HasTrouserMeasurements;
			}

			set
			{
				if (this._HasTrouserMeasurements != value)
				{
					this._HasTrouserMeasurements = value;
					this.OnPropertyChanged("HasTrouserMeasurements");
				}
			}
		}

		private string _SelectedRegionString = string.Empty;

		public string SelectedRegionString
		{
			get
			{
				return this._SelectedRegionString;
			}

			set
			{
				if (this._SelectedRegionString != value)
				{
					this._SelectedRegionString = value;
					this.OnPropertyChanged("SelectedRegionString");
				}
			}
		}

		private Brands _Brands = new Brands();

		public Brands Brands
		{
			get
			{
				return this._Brands;
			}
		}
	}

	public class Profiles : System.Collections.ObjectModel.ObservableCollection<ProfilesItem>
	{ 
	}

	public class ProfilesItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private double _Id = 0;

		public double Id
		{
			get
			{
				return this._Id;
			}

			set
			{
				if (this._Id != value)
				{
					this._Id = value;
					this.OnPropertyChanged("Id");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private bool _IsProtected = false;

		public bool IsProtected
		{
			get
			{
				return this._IsProtected;
			}

			set
			{
				if (this._IsProtected != value)
				{
					this._IsProtected = value;
					this.OnPropertyChanged("IsProtected");
				}
			}
		}

		private string _Gender = string.Empty;

		public string Gender
		{
			get
			{
				return this._Gender;
			}

			set
			{
				if (this._Gender != value)
				{
					this._Gender = value;
					this.OnPropertyChanged("Gender");
				}
			}
		}
	}

	public class SelectedProfile : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private Measurements _Measurements = new Measurements();

		public Measurements Measurements
		{
			get
			{
				return this._Measurements;
			}
		}

		private double _Id = 0;

		public double Id
		{
			get
			{
				return this._Id;
			}

			set
			{
				if (this._Id != value)
				{
					this._Id = value;
					this.OnPropertyChanged("Id");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private bool _IsProtected = false;

		public bool IsProtected
		{
			get
			{
				return this._IsProtected;
			}

			set
			{
				if (this._IsProtected != value)
				{
					this._IsProtected = value;
					this.OnPropertyChanged("IsProtected");
				}
			}
		}

		private string _Gender = string.Empty;

		public string Gender
		{
			get
			{
				return this._Gender;
			}

			set
			{
				if (this._Gender != value)
				{
					this._Gender = value;
					this.OnPropertyChanged("Gender");
				}
			}
		}
	}

	public class Measurements : System.Collections.ObjectModel.ObservableCollection<MeasurementsItem>
	{ 
	}

	public class MeasurementsItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private MeasurementType _MeasurementType = new MeasurementType();

		public MeasurementType MeasurementType
		{
			get
			{
				return this._MeasurementType;
			}

			set
			{
				if (this._MeasurementType != value)
				{
					this._MeasurementType = value;
					this.OnPropertyChanged("MeasurementType");
				}
			}
		}

		private PreferredUnit _PreferredUnit = new PreferredUnit();

		public PreferredUnit PreferredUnit
		{
			get
			{
				return this._PreferredUnit;
			}

			set
			{
				if (this._PreferredUnit != value)
				{
					this._PreferredUnit = value;
					this.OnPropertyChanged("PreferredUnit");
				}
			}
		}

		private OtherUnitFormattedValues _OtherUnitFormattedValues = new OtherUnitFormattedValues();

		public OtherUnitFormattedValues OtherUnitFormattedValues
		{
			get
			{
				return this._OtherUnitFormattedValues;
			}
		}

		private double _Id = 0;

		public double Id
		{
			get
			{
				return this._Id;
			}

			set
			{
				if (this._Id != value)
				{
					this._Id = value;
					this.OnPropertyChanged("Id");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private string _FormattedValue = string.Empty;

		public string FormattedValue
		{
			get
			{
				return this._FormattedValue;
			}

			set
			{
				if (this._FormattedValue != value)
				{
					this._FormattedValue = value;
					this.OnPropertyChanged("FormattedValue");
				}
			}
		}
	}

	public class MeasurementType : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private Units _Units = new Units();

		public Units Units
		{
			get
			{
				return this._Units;
			}
		}

		private double _Id = 0;

		public double Id
		{
			get
			{
				return this._Id;
			}

			set
			{
				if (this._Id != value)
				{
					this._Id = value;
					this.OnPropertyChanged("Id");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private bool _IsConvertible = false;

		public bool IsConvertible
		{
			get
			{
				return this._IsConvertible;
			}

			set
			{
				if (this._IsConvertible != value)
				{
					this._IsConvertible = value;
					this.OnPropertyChanged("IsConvertible");
				}
			}
		}
	}

	public class Units : System.Collections.ObjectModel.ObservableCollection<UnitsItem>
	{ 
	}

	public class UnitsItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private double _Id = 0;

		public double Id
		{
			get
			{
				return this._Id;
			}

			set
			{
				if (this._Id != value)
				{
					this._Id = value;
					this.OnPropertyChanged("Id");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private string _ConversionFactor = string.Empty;

		public string ConversionFactor
		{
			get
			{
				return this._ConversionFactor;
			}

			set
			{
				if (this._ConversionFactor != value)
				{
					this._ConversionFactor = value;
					this.OnPropertyChanged("ConversionFactor");
				}
			}
		}

		private string _ConversionIntercept = string.Empty;

		public string ConversionIntercept
		{
			get
			{
				return this._ConversionIntercept;
			}

			set
			{
				if (this._ConversionIntercept != value)
				{
					this._ConversionIntercept = value;
					this.OnPropertyChanged("ConversionIntercept");
				}
			}
		}

		private string _Format = string.Empty;

		public string Format
		{
			get
			{
				return this._Format;
			}

			set
			{
				if (this._Format != value)
				{
					this._Format = value;
					this.OnPropertyChanged("Format");
				}
			}
		}
	}

	public class PreferredUnit : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _FormattedValue = string.Empty;

		public string FormattedValue
		{
			get
			{
				return this._FormattedValue;
			}

			set
			{
				if (this._FormattedValue != value)
				{
					this._FormattedValue = value;
					this.OnPropertyChanged("FormattedValue");
				}
			}
		}
	}

	public class OtherUnitFormattedValues : System.Collections.ObjectModel.ObservableCollection<OtherUnitFormattedValuesItem>
	{ 
	}

	public class OtherUnitFormattedValuesItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
	}

	public class MeasurementTypes : System.Collections.ObjectModel.ObservableCollection<MeasurementTypesItem>
	{ 
	}

	public class MeasurementTypesItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private double _Id = 0;

		public double Id
		{
			get
			{
				return this._Id;
			}

			set
			{
				if (this._Id != value)
				{
					this._Id = value;
					this.OnPropertyChanged("Id");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private bool _IsConvertible = false;

		public bool IsConvertible
		{
			get
			{
				return this._IsConvertible;
			}

			set
			{
				if (this._IsConvertible != value)
				{
					this._IsConvertible = value;
					this.OnPropertyChanged("IsConvertible");
				}
			}
		}
	}

	public class MeasurementTemplates : System.Collections.ObjectModel.ObservableCollection<MeasurementTemplatesItem>
	{ 
	}

	public class MeasurementTemplatesItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private MeasurementType3 _MeasurementType = new MeasurementType3();

		public MeasurementType3 MeasurementType
		{
			get
			{
				return this._MeasurementType;
			}

			set
			{
				if (this._MeasurementType != value)
				{
					this._MeasurementType = value;
					this.OnPropertyChanged("MeasurementType");
				}
			}
		}

		private PreferredUnit2 _PreferredUnit = new PreferredUnit2();

		public PreferredUnit2 PreferredUnit
		{
			get
			{
				return this._PreferredUnit;
			}

			set
			{
				if (this._PreferredUnit != value)
				{
					this._PreferredUnit = value;
					this.OnPropertyChanged("PreferredUnit");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private double _Id = 0;

		public double Id
		{
			get
			{
				return this._Id;
			}

			set
			{
				if (this._Id != value)
				{
					this._Id = value;
					this.OnPropertyChanged("Id");
				}
			}
		}
	}

	public class MeasurementType3 : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private Units3 _Units = new Units3();

		public Units3 Units
		{
			get
			{
				return this._Units;
			}
		}

		private bool _IsConvertible = false;

		public bool IsConvertible
		{
			get
			{
				return this._IsConvertible;
			}

			set
			{
				if (this._IsConvertible != value)
				{
					this._IsConvertible = value;
					this.OnPropertyChanged("IsConvertible");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}
	}

	public class Units3 : System.Collections.ObjectModel.ObservableCollection<UnitsItem3>
	{ 
	}

	public class UnitsItem3 : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private string _FormattedValue = string.Empty;

		public string FormattedValue
		{
			get
			{
				return this._FormattedValue;
			}

			set
			{
				if (this._FormattedValue != value)
				{
					this._FormattedValue = value;
					this.OnPropertyChanged("FormattedValue");
				}
			}
		}
	}

	public class PreferredUnit2 : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private string _FormattedValue = string.Empty;

		public string FormattedValue
		{
			get
			{
				return this._FormattedValue;
			}

			set
			{
				if (this._FormattedValue != value)
				{
					this._FormattedValue = value;
					this.OnPropertyChanged("FormattedValue");
				}
			}
		}
	}

	public class SuggestedMeasurementTemplate : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private MeasurementType1 _MeasurementType = new MeasurementType1();

		public MeasurementType1 MeasurementType
		{
			get
			{
				return this._MeasurementType;
			}

			set
			{
				if (this._MeasurementType != value)
				{
					this._MeasurementType = value;
					this.OnPropertyChanged("MeasurementType");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private double _Id = 0;

		public double Id
		{
			get
			{
				return this._Id;
			}

			set
			{
				if (this._Id != value)
				{
					this._Id = value;
					this.OnPropertyChanged("Id");
				}
			}
		}

		private string _Value = string.Empty;

		public string Value
		{
			get
			{
				return this._Value;
			}

			set
			{
				if (this._Value != value)
				{
					this._Value = value;
					this.OnPropertyChanged("Value");
				}
			}
		}
	}

	public class MeasurementType1 : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private Units1 _Units = new Units1();

		public Units1 Units
		{
			get
			{
				return this._Units;
			}
		}

		private double _Id = 0;

		public double Id
		{
			get
			{
				return this._Id;
			}

			set
			{
				if (this._Id != value)
				{
					this._Id = value;
					this.OnPropertyChanged("Id");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private bool _IsConvertible = false;

		public bool IsConvertible
		{
			get
			{
				return this._IsConvertible;
			}

			set
			{
				if (this._IsConvertible != value)
				{
					this._IsConvertible = value;
					this.OnPropertyChanged("IsConvertible");
				}
			}
		}
	}

	public class Units1 : System.Collections.ObjectModel.ObservableCollection<UnitsItem1>
	{ 
	}

	public class UnitsItem1 : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private double _Id = 0;

		public double Id
		{
			get
			{
				return this._Id;
			}

			set
			{
				if (this._Id != value)
				{
					this._Id = value;
					this.OnPropertyChanged("Id");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private string _Format = string.Empty;

		public string Format
		{
			get
			{
				return this._Format;
			}

			set
			{
				if (this._Format != value)
				{
					this._Format = value;
					this.OnPropertyChanged("Format");
				}
			}
		}

		private double _ConversionFactor = 0;

		public double ConversionFactor
		{
			get
			{
				return this._ConversionFactor;
			}

			set
			{
				if (this._ConversionFactor != value)
				{
					this._ConversionFactor = value;
					this.OnPropertyChanged("ConversionFactor");
				}
			}
		}

		private double _ConversionIntercept = 0;

		public double ConversionIntercept
		{
			get
			{
				return this._ConversionIntercept;
			}

			set
			{
				if (this._ConversionIntercept != value)
				{
					this._ConversionIntercept = value;
					this.OnPropertyChanged("ConversionIntercept");
				}
			}
		}
	}

	public class SelectedMeasurement : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private MeasurementType2 _MeasurementType = new MeasurementType2();

		public MeasurementType2 MeasurementType
		{
			get
			{
				return this._MeasurementType;
			}

			set
			{
				if (this._MeasurementType != value)
				{
					this._MeasurementType = value;
					this.OnPropertyChanged("MeasurementType");
				}
			}
		}

		private PreferredUnit1 _PreferredUnit = new PreferredUnit1();

		public PreferredUnit1 PreferredUnit
		{
			get
			{
				return this._PreferredUnit;
			}

			set
			{
				if (this._PreferredUnit != value)
				{
					this._PreferredUnit = value;
					this.OnPropertyChanged("PreferredUnit");
				}
			}
		}

		private double _Id = 0;

		public double Id
		{
			get
			{
				return this._Id;
			}

			set
			{
				if (this._Id != value)
				{
					this._Id = value;
					this.OnPropertyChanged("Id");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private double _Value = 0;

		public double Value
		{
			get
			{
				return this._Value;
			}

			set
			{
				if (this._Value != value)
				{
					this._Value = value;
					this.OnPropertyChanged("Value");
				}
			}
		}
	}

	public class MeasurementType2 : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private Units2 _Units = new Units2();

		public Units2 Units
		{
			get
			{
				return this._Units;
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private double _Id = 0;

		public double Id
		{
			get
			{
				return this._Id;
			}

			set
			{
				if (this._Id != value)
				{
					this._Id = value;
					this.OnPropertyChanged("Id");
				}
			}
		}

		private bool _IsConvertible = false;

		public bool IsConvertible
		{
			get
			{
				return this._IsConvertible;
			}

			set
			{
				if (this._IsConvertible != value)
				{
					this._IsConvertible = value;
					this.OnPropertyChanged("IsConvertible");
				}
			}
		}
	}

	public class Units2 : System.Collections.ObjectModel.ObservableCollection<UnitsItem2>
	{ 
	}

	public class UnitsItem2 : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private double _Id = 0;

		public double Id
		{
			get
			{
				return this._Id;
			}

			set
			{
				if (this._Id != value)
				{
					this._Id = value;
					this.OnPropertyChanged("Id");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private string _Format = string.Empty;

		public string Format
		{
			get
			{
				return this._Format;
			}

			set
			{
				if (this._Format != value)
				{
					this._Format = value;
					this.OnPropertyChanged("Format");
				}
			}
		}

		private double _ConversionFactor = 0;

		public double ConversionFactor
		{
			get
			{
				return this._ConversionFactor;
			}

			set
			{
				if (this._ConversionFactor != value)
				{
					this._ConversionFactor = value;
					this.OnPropertyChanged("ConversionFactor");
				}
			}
		}

		private double _ConversionIntercept = 0;

		public double ConversionIntercept
		{
			get
			{
				return this._ConversionIntercept;
			}

			set
			{
				if (this._ConversionIntercept != value)
				{
					this._ConversionIntercept = value;
					this.OnPropertyChanged("ConversionIntercept");
				}
			}
		}

		private string _FormattedValue = string.Empty;

		public string FormattedValue
		{
			get
			{
				return this._FormattedValue;
			}

			set
			{
				if (this._FormattedValue != value)
				{
					this._FormattedValue = value;
					this.OnPropertyChanged("FormattedValue");
				}
			}
		}
	}

	public class PreferredUnit1 : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _FormattedValue = string.Empty;

		public string FormattedValue
		{
			get
			{
				return this._FormattedValue;
			}

			set
			{
				if (this._FormattedValue != value)
				{
					this._FormattedValue = value;
					this.OnPropertyChanged("FormattedValue");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}
	}

	public class QuickProfiles : System.Collections.ObjectModel.ObservableCollection<QuickProfilesItem>
	{ 
	}

	public class QuickProfilesItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Gender = string.Empty;

		public string Gender
		{
			get
			{
				return this._Gender;
			}

			set
			{
				if (this._Gender != value)
				{
					this._Gender = value;
					this.OnPropertyChanged("Gender");
				}
			}
		}

		private double _Id = 0;

		public double Id
		{
			get
			{
				return this._Id;
			}

			set
			{
				if (this._Id != value)
				{
					this._Id = value;
					this.OnPropertyChanged("Id");
				}
			}
		}

		private bool _IsProtected = false;

		public bool IsProtected
		{
			get
			{
				return this._IsProtected;
			}

			set
			{
				if (this._IsProtected != value)
				{
					this._IsProtected = value;
					this.OnPropertyChanged("IsProtected");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}
	}

	public class Regions : System.Collections.ObjectModel.ObservableCollection<RegionsItem>
	{ 
	}

	public class RegionsItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}
	}

	public class ConversionMeasurements : System.Collections.ObjectModel.ObservableCollection<ConversionMeasurementsItem>
	{ 
	}

	public class ConversionMeasurementsItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private string _FormattedValue = string.Empty;

		public string FormattedValue
		{
			get
			{
				return this._FormattedValue;
			}

			set
			{
				if (this._FormattedValue != value)
				{
					this._FormattedValue = value;
					this.OnPropertyChanged("FormattedValue");
				}
			}
		}
	}

	public class BrandsItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private bool _Selected = false;

		public bool Selected
		{
			get
			{
				return this._Selected;
			}

			set
			{
				if (this._Selected != value)
				{
					this._Selected = value;
					this.OnPropertyChanged("Selected");
				}
			}
		}
	}

	public class Brands : System.Collections.ObjectModel.ObservableCollection<BrandsItem>
	{ 
	}
#endif
}
